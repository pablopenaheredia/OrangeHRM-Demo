# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: [US03] Gestión de empleados | Editar empleados correctamente >> Validar editar un empleado exitosamente
- Location: C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\edit-employee.info.spec.ts:10:9

# Error details

```
Error: Timed out 5000ms waiting for expect(locator).toBeVisible()

Locator: getByRole('paragraph', { name: 'Successfully Updated' })
Expected: visible
Received: <element(s) not found>
Call log:
  - expect.toBeVisible with timeout 5000ms
  - waiting for getByRole('paragraph', { name: 'Successfully Updated' })

    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\edit-employee.info.spec.ts:44:53
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\edit-employee.info.spec.ts:43:20
```

# Page snapshot

```yaml
- complementary:
  - navigation "Sidepanel":
    - link "client brand banner":
      - img "client brand banner"
    - textbox "Search"
    - button ""
    - separator
    - list:
      - listitem:
        - link "Admin"
      - listitem:
        - link "PIM"
      - listitem:
        - link "Leave"
      - listitem:
        - link "Time"
      - listitem:
        - link "Recruitment"
      - listitem:
        - link "My Info"
      - listitem:
        - link "Performance"
      - listitem:
        - link "Dashboard"
      - listitem:
        - link "Directory"
      - listitem:
        - link "Maintenance"
      - listitem:
        - link "Claim":
          - img
          - text: Claim
      - listitem:
        - link "Buzz"
- banner:
  - heading "PIM" [level=6]
  - link "Upgrade":
    - button "Upgrade"
  - list:
    - listitem:
      - img "profile picture"
      - paragraph: prueba editar
      - text: 
  - navigation "Topbar Menu":
    - list:
      - listitem: Configuration 
      - listitem:
        - link "Employee List"
      - listitem:
        - link "Add Employee"
      - listitem:
        - link "Reports"
      - button ""
- heading "Roberto Heredia" [level=6]
- img "profile picture"
- tablist:
  - tab "Personal Details":
    - link "Personal Details"
  - tab "Contact Details":
    - link "Contact Details"
  - tab "Emergency Contacts":
    - link "Emergency Contacts"
  - tab "Dependents":
    - link "Dependents"
  - tab "Immigration":
    - link "Immigration"
  - tab "Job":
    - link "Job"
  - tab "Salary":
    - link "Salary"
  - tab "Report-to":
    - link "Report-to"
  - tab "Qualifications":
    - link "Qualifications"
  - tab "Memberships":
    - link "Memberships"
- heading "Personal Details" [level=6]
- separator
- text: Employee Full Name*
- textbox "First Name": Roberto
- textbox "Middle Name"
- textbox "Last Name": Sanchez
- separator
- text: Employee Id
- textbox: "5344"
- text: Other Id
- textbox
- text: Driver's License Number
- textbox
- text: License Expiry Date
- textbox "yyyy-dd-mm"
- text: 
- separator
- text: Nationality -- Select --  Marital Status -- Select --  Date of Birth
- textbox "yyyy-dd-mm"
- text:  Gender
- radio "Male"
- text: Male
- radio "Female"
- text: Female
- separator
- paragraph: "* Required"
- button "Save"
- separator
- heading "Custom Fields" [level=6]
- separator
- text: Blood Type -- Select --  Test_Field
- textbox
- separator
- button "Save"
- separator
- heading "Attachments" [level=6]
- button " Add"
- separator
- text: No Records Found
- table:
  - rowgroup:
    - row " File Name Description Size Type Date Added Added By Actions":
      - columnheader "":
        - checkbox ""
        - text: 
      - columnheader "File Name"
      - columnheader "Description"
      - columnheader "Size"
      - columnheader "Type"
      - columnheader "Date Added"
      - columnheader "Added By"
      - columnheader "Actions"
  - rowgroup
- paragraph: OrangeHRM OS 5.7
- paragraph:
  - text: © 2005 - 2025
  - link "OrangeHRM, Inc"
  - text: . All rights reserved.
```

# Test source

```ts
   1 | import {expect, test } from '../../fixtures';
   2 |
   3 | test.beforeEach(async ({ loginPage }) => {
   4 |     await loginPage.goToLoginPage();
   5 |     await loginPage.login();
   6 | });
   7 |
   8 | test.describe('[US03] Gestión de empleados | Editar empleados correctamente', () => {
   9 |
  10 |     test('Validar editar un empleado exitosamente', async ({ employeePage }) => {
  11 |         const uniqueID = await employeePage.generateUniqueID();
  12 |         await test.step('Dado que el usuario se encuenrta en la pagina de inicio de sesión', async () => { });
  13 |         await test.step('Cuando el usuario navega a la página de empleados', async () => {
  14 |             await employeePage.clickOnPIMModule();
  15 |         });
  16 |         await test.step('Y se dirige hacia la sección de agregar empleados', async () => {
  17 |             await employeePage.goToAddEmployeePage();
  18 |         });
  19 |         await test.step('Y el usuario llena los campos requeridos', async () => {
  20 |             await employeePage.fillAddEmployee("Roberto", "Heredia", uniqueID);
  21 |         });
  22 |         await test.step('Y el usuario guarda al empleado', async () => {
  23 |             await employeePage.saveNewEmployeeClick();
  24 |         });
  25 |
  26 |         await test.step('Y el usuario busca al empleado por su ID', async () => {
  27 |             await employeePage.clickOnPIMModule();
  28 |             await employeePage.fillEmployeeInfoIDInput(uniqueID);
  29 |             await employeePage.searchClick();
  30 |         });
  31 |         /*await test.step('Entonces el empleado se encuentra en la lista de empleados', async () => {
  32 |             await employeePage.page.waitForLoadState('domcontentloaded');
  33 |             const locator = employeePage.idColumnValues(uniqueID);
  34 |             await expect.soft(locator).toBeVisible();
  35 |         });*/
  36 |         await test.step('Y hace click en el boton para editar su información', async () => {
  37 |             await employeePage.editEmployeeInfoIconClick();
  38 |         });
  39 |         await test.step('Y el usuario edita la información del empleado', async () => {
  40 |             await employeePage.fillAddEmployee("Roberto", "Sanchez", uniqueID);
  41 |             await employeePage.saveEditEmployeeClick();
  42 |         });
  43 |         await test.step('Y se edita correctamente', async () => {
> 44 |             await expect(employeePage.successPopUp).toBeVisible();
     |                                                     ^ Error: Timed out 5000ms waiting for expect(locator).toBeVisible()
  45 |         });
  46 |         await test.step("Entonces el usuario vuelve a la lista de empleados", async () => {
  47 |             await employeePage.clickOnPIMModule();
  48 |         });
  49 |         await test.step('Y el empleado editado se encuentra en la lista de empleados', async () => {
  50 |             await expect.soft(employeePage.idColumnValues(uniqueID)).toBeVisible();
  51 |         });        
  52 |     })
  53 | });
  54 |         
```
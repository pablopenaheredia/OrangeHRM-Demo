# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: [US02] GestiÃ³n de empleados | Agregar nuevos empleados >> Escenario 1 | Validar agregar un empleado exitosamente
- Location: C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\add-employee-success.spec.ts:10:9

# Error details

```
Error: locator.scrollIntoViewIfNeeded: Test ended.
Call log:
  - waiting for locator('div.oxd-table-row:has-text("1390")')

    at EmployeePage.isUniqueID (C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\pageobjectsmodels\EmployeePage.ts:91:27)
    at EmployeePage.generateUniqueID (C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\pageobjectsmodels\EmployeePage.ts:101:24)
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\add-employee-success.spec.ts:11:26
```

# Test source

```ts
   1 | import { type Page, type Locator, expect } from '@playwright/test';
   2 | export type EmployeeData = {
   3 |     firstName: string;
   4 |     lastName: string;
   5 |     employeeID: string;
   6 | };
   7 | export class EmployeePage {
   8 |     readonly page: Page;
   9 |     readonly addEmployeeBtn: Locator;
   10 |     readonly firstNameInput: Locator;
   11 |     readonly lastNameInput: Locator;
   12 |     readonly employeeIDInput: Locator;
   13 |     readonly saveNewEmployeeBtn: Locator;
   14 |     readonly saveEditBtn: Locator;
   15 |     readonly searchBtn: Locator;
   16 |     readonly pimModuleBtn: Locator;
   17 |     readonly employeeInfoIDInput: Locator;
   18 |     //readonly idColumnValues = (id: string) =>  this.page.locator(`div.oxd-table-body div.oxd-table-row div.oxd-table-cell:nth-child(2):has-text("${id}")`).first();
   19 |     readonly idColumnValues = (id: string) => this.page.locator(`div.oxd-table-cell:has-text("${id}")`).first()
   20 |     readonly lastNameValues = (lastname: string) => this.page.locator(`div.oxd-table-cell:has-text("${lastname}")`).first()
   21 |     readonly editEmployeeInfoIconBtn: Locator
   22 |     readonly successPopUp: Locator
   23 |     
   24 |     constructor(page: Page) {
   25 |         this.page = page;
   26 |         this.addEmployeeBtn = this.page.locator("//button[contains(.,'Add')]");
   27 |         this.firstNameInput = this.page.getByRole('textbox', { name: 'First Name' });
   28 |         this.lastNameInput = this.page.getByRole('textbox', { name: 'Last Name' });
   29 |         this.employeeIDInput = this.page.locator("(//input[@class='oxd-input oxd-input--active'])[2]");
   30 |         this.saveNewEmployeeBtn = this.page.getByRole('button', { name: 'Save' });
   31 |         this.saveEditBtn = this.page.locator("(//button[@type='submit'])[1]");
   32 |         this.searchBtn = this.page.getByRole('button', { name: 'Search' });
   33 |         this.pimModuleBtn = this.page.getByRole('link', { name: 'PIM' });
   34 |         this.employeeInfoIDInput = this.page.getByRole('textbox').nth(2);
   35 |         this.editEmployeeInfoIconBtn = this.page.locator("//div[@class='oxd-table-cell-actions']//button[1]");
   36 |         this.successPopUp = this.page.getByRole('alert', { name: 'Successfully Updated' });
   37 |     }
   38 |
   39 |     async goToAddEmployeePage() {
   40 |         await this.page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/pim/viewEmployeeList');
   41 |         await this.addEmployeeBtn.click();
   42 |         await this.page.waitForLoadState('domcontentloaded');
   43 |         await expect(this.page).toHaveURL(/pim\/addEmployee/);
   44 |     }
   45 |
   46 |     async fillAddEmployee(employee: EmployeeData) {
   47 |         await this.firstNameInput.fill(employee.firstName);
   48 |         await this.lastNameInput.fill(employee.lastName);
   49 |         await this.employeeIDInput.fill(employee.employeeID);
   50 |     }
   51 |         
   52 |     async addNewEmployee(employee: EmployeeData) {
   53 |         await this.clickOnPIMModule();
   54 |         await this.goToAddEmployeePage();
   55 |         await this.fillAddEmployee(employee);
   56 |         await this.saveNewEmployeeClick();
   57 |         await this.page.waitForResponse(response => response.url().includes('/api/v2/pim/employees') && response.status() === 200);
   58 |         await this.page.waitForTimeout(2000);
   59 |     }
   60 |
   61 |     async searchClick() {
   62 |         await this.searchBtn.click();
   63 |     }
   64 |
   65 |     async fillEmployeeInfoIDInput(id: string) {
   66 |         await this.employeeInfoIDInput.fill(id);
   67 |     }
   68 |     async saveNewEmployeeClick() {
   69 |         await this.saveNewEmployeeBtn.click();
   70 |     }
   71 |     async saveEditEmployeeClick() {
   72 |         await this.saveEditBtn.click();
   73 |     }
   74 |     async clickOnPIMModule() {
   75 |         await this.pimModuleBtn.click();
   76 |     }
   77 |
   78 |     async succeedPopUpVisible() {
   79 |         await this.successPopUp.isVisible();
   80 |     };
   81 |
   82 |     async editEmployeeInfoIconClick() {
   83 |         await this.editEmployeeInfoIconBtn.click();
   84 |     }
   85 |
   86 |     async isUniqueID(id: string): Promise<boolean> {
   87 |         await this.page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/pim/viewEmployeeList');
   88 |         await this.page.waitForLoadState('domcontentloaded');
   89 |
   90 |         const employeeRow = this.page.locator(`div.oxd-table-row:has-text("${id}")`);
>  91 |         await employeeRow.scrollIntoViewIfNeeded();
      |                           ^ Error: locator.scrollIntoViewIfNeeded: Test ended.
   92 |         const isRowVisible = await employeeRow.isVisible();
   93 |         return !isRowVisible;
   94 |     }
   95 |
   96 |     async generateUniqueID(): Promise<string> {
   97 |         let uniqueID: string = '';
   98 |         let isUnique: boolean = false;
   99 |         while (!isUnique) {
  100 |             uniqueID = Math.floor(Math.random() * (10000 - 1 + 1) + 1).toString();
  101 |             isUnique = await this.isUniqueID(uniqueID);
  102 |         }
  103 |         return uniqueID;
  104 |     }
  105 | }
  106 |
```
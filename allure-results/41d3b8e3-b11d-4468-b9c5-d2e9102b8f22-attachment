# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: [US01] Inicio de sesión >> Validar boton login deshabilitado sin credenciales
- Location: C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\login\login-success.spec.ts:79:9

# Error details

```
Error: Timed out 6000ms waiting for expect(locator).toBeDisabled()

Locator: locator('button[type=\'submit\']')
Expected: disabled
Received: enabled
Call log:
  - expect.toBeDisabled with timeout 6000ms
  - waiting for locator('button[type=\'submit\']')
    6 × locator resolved to <button type="submit" data-v-10d463b7="" data-v-0af708be="" class="oxd-button oxd-button--medium oxd-button--main orangehrm-login-button">…</button>
      - unexpected value "enabled"

    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\login\login-success.spec.ts:85:75
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\login\login-success.spec.ts:84:20
```

# Page snapshot

```yaml
- img "company-branding"
- heading "Login" [level=5]
- paragraph: "Username : Admin"
- paragraph: "Password : admin123"
- text:  Username
- textbox "Username"
- text:  Password
- textbox "Password"
- button "Login"
- paragraph: Forgot your password?
- link
- link
- link
- link
- paragraph: OrangeHRM OS 5.7
- paragraph:
  - text: © 2005 - 2025
  - link "OrangeHRM, Inc"
  - text: . All rights reserved.
- img "orangehrm-logo"
```

# Test source

```ts
   1 | import { expect, test } from '../../fixtures';
   2 |
   3 | const user = process.env.USER;
   4 | const password = process.env.PASSWORD;
   5 |
   6 | test.describe('[US01] Inicio de sesión', () => {
   7 |     
   8 |     test('Validar inicio de sesión exitoso', async ({ loginPage }) => {
   9 |         await test.step('Dado que el usuario navega a la página de inicio de sesión', async () => {
  10 |             await loginPage.goToLoginPage();
  11 |         });
  12 |
  13 |         await test.step('Cuando el usuario ingresa credenciales válidas y hace clic en "Login"', async () => {
  14 |             await loginPage.login();
  15 |         });
  16 |
  17 |         await test.step('Entonces el usuario debería ser redirigido al dashboard y ver el menú principal', async () => {
  18 |             await expect(loginPage.page).toHaveURL('https://opensource-demo.orangehrmlive.com/web/index.php/dashboard/index');
  19 |             await expect(loginPage.page.locator('ul.oxd-main-menu')).toBeVisible();
  20 |         });
  21 |     });
  22 |
  23 |     test('Validar error al iniciar sesión con username incorrecto', async ({ loginPage }) => {
  24 |         await test.step('Dado que el usuario navega a la página de inicio de sesión', async () => {
  25 |             await loginPage.goToLoginPage();
  26 |         });
  27 |
  28 |         await test.step('Cuando el usuario ingresa un nombre de usuario incorrecto y la contraseña correcta', async () => {
  29 |             await loginPage.login('incorrecto', password);
  30 |         });
  31 |
  32 |         await test.step('Entonces debería aparecer un mensaje de error indicando "Invalid credentials"', async () => {
  33 |             await expect(loginPage.page.locator('div.oxd-alert-content.oxd-alert-content--error')).toHaveText('Invalid credentials');
  34 |         });
  35 |     });
  36 |
  37 |     test('Validar error al iniciar sesión con password incorrecto', async ({ loginPage }) => {
  38 |         await test.step('Dado que el usuario navega a la página de inicio de sesión', async () => {
  39 |             await loginPage.goToLoginPage();
  40 |         });
  41 |
  42 |         await test.step('Cuando el usuario ingresa el nombre de usuario correcto y una contraseña incorrecta', async () => {
  43 |             await loginPage.login(user, 'incorrecta');
  44 |         });
  45 |
  46 |         await test.step('Entonces debería aparecer un mensaje de error indicando "Invalid credentials"', async () => {
  47 |             await expect(loginPage.page.locator('div.oxd-alert-content.oxd-alert-content--error')).toHaveText('Invalid credentials');
  48 |         });
  49 |     });
  50 |
  51 |     test('Validar inicio de sesión sin ingresar username', async ({ loginPage }) => {
  52 |         await test.step('Dado que el usuario navega a la página de inicio de sesión', async () => {
  53 |             await loginPage.goToLoginPage();
  54 |         });
  55 |
  56 |         await test.step('Cuando el usuario deja el campo del nombre de usuario vacío y ingresa la contraseña correcta', async () => {
  57 |             await loginPage.login('', password);
  58 |         });
  59 |
  60 |         await test.step('Entonces debería aparecer un mensaje de error indicando "Required"', async () => {
  61 |             await expect(loginPage.page.locator('span.oxd-text.oxd-text--span')).toHaveText('Required');
  62 |         });
  63 |     });
  64 |
  65 |     test('Validar inicio de sesión sin ingresar contraseña', async ({ loginPage }) => {
  66 |         await test.step('Dado que el usuario navega a la página de inicio de sesión', async () => {
  67 |             await loginPage.goToLoginPage();
  68 |         });
  69 |
  70 |         await test.step('Cuando el usuario ingresa el nombre de usuario correcto y deja el campo de la contraseña vacío', async () => {
  71 |             await loginPage.login(user, '');
  72 |         });
  73 |
  74 |         await test.step('Entonces debería aparecer un mensaje de error indicando "Required"', async () => {
  75 |             await expect(loginPage.page.locator('span.oxd-text.oxd-text--span')).toHaveText('Required');
  76 |         });
  77 |     });
  78 |
  79 |     test('Validar boton login deshabilitado sin credenciales', async ({ loginPage }) => {
  80 |         await test.step('Dado que el usuario navega a la página de inicio de sesión', async () => {
  81 |             await loginPage.goToLoginPage();
  82 |         });
  83 |
  84 |         await test.step('Entonces el botón "Login" debería estar deshabilitado cuando los campos están vacíos', async () => {
> 85 |             await expect(loginPage.page.locator("button[type='submit']")).toBeDisabled();
     |                                                                           ^ Error: Timed out 6000ms waiting for expect(locator).toBeDisabled()
  86 |         });
  87 |     });
  88 |
  89 | });
```
# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: [US02] GestiÃ³n de empleados | Agregar nuevos empleados >> Escenario 1 | Validar agregar un empleado exitosamente
- Location: C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\add-employee-success.spec.ts:10:9

# Error details

```
Error: locator.click: Test timeout of 40000ms exceeded.
Call log:
  - waiting for getByRole('link', { name: 'PIM' })

    at EmployeePage.clickOnPIMModule (C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\pageobjectsmodels\EmployeePage.ts:78:33)
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\add-employee-success.spec.ts:14:32
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\add-employee-success.spec.ts:13:20
```

# Test source

```ts
   1 | import { type Page, type Locator, expect } from '@playwright/test';
   2 |
   3 | export type EmployeeData = {
   4 |     firstName: string;
   5 |     lastName: string;
   6 |     employeeID: string;
   7 | };
   8 |
   9 | export class EmployeePage {
   10 |     readonly page: Page;
   11 |     readonly addEmployeeBtn: Locator;
   12 |     readonly firstNameInput: Locator;
   13 |     readonly lastNameInput: Locator;
   14 |     readonly employeeIDInput: Locator;
   15 |     readonly saveNewEmployeeBtn: Locator;
   16 |     readonly saveEditBtn: Locator;
   17 |     readonly searchBtn: Locator;
   18 |     readonly pimModuleBtn: Locator;
   19 |     readonly employeeInfoIDInput: Locator;
   20 |
   21 |     readonly idColumnValues = (id: string) => this.page.getByRole('cell', { name: id }).first();
   22 |     //readonly idColumnValues = (id: string) => this.page.locator(`div.oxd-table-cell:has-text("${id}")`).first()
   23 |     readonly lastNameValues = (lastname: string) => this.page.locator(`div.oxd-table-cell:has-text("${lastname}")`).first()
   24 |     readonly editEmployeeInfoIconBtn: Locator
   25 |     readonly successPopUp: Locator
   26 |     
   27 |     constructor(page: Page) {
   28 |         this.page = page;
   29 |         this.addEmployeeBtn = this.page.locator("//button[contains(.,'Add')]");
   30 |         this.firstNameInput = this.page.getByRole('textbox', { name: 'First Name' });
   31 |         this.lastNameInput = this.page.getByRole('textbox', { name: 'Last Name' });
   32 |         this.employeeIDInput = this.page.locator("(//input[@class='oxd-input oxd-input--active'])[2]");
   33 |         this.saveNewEmployeeBtn = this.page.getByRole('button', { name: 'Save' });
   34 |         this.saveEditBtn = this.page.locator("(//button[@type='submit'])[1]");
   35 |         this.searchBtn = this.page.getByRole('button', { name: 'Search' });
   36 |         this.pimModuleBtn = this.page.getByRole('link', { name: 'PIM' });
   37 |         this.employeeInfoIDInput = this.page.getByRole('textbox').nth(2);
   38 |         this.editEmployeeInfoIconBtn = this.page.locator("//div[@class='oxd-table-cell-actions']//button[1]");
   39 |         this.successPopUp = this.page.getByRole('alert', { name: 'Successfully Updated' });
   40 |     }
   41 |
   42 |     async goToAddEmployeePage() {
   43 |         await this.page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/pim/viewEmployeeList');
   44 |         await this.addEmployeeBtn.click();
   45 |         await this.page.waitForLoadState('domcontentloaded');
   46 |         await expect(this.page).toHaveURL(/pim\/addEmployee/);
   47 |     }
   48 |
   49 |     async fillAddEmployee(employee: EmployeeData) {
   50 |         await this.firstNameInput.fill(employee.firstName);
   51 |         await this.lastNameInput.fill(employee.lastName);
   52 |         await this.employeeIDInput.fill(employee.employeeID);
   53 |     }
   54 |
   55 |     async addNewEmployee(employee: EmployeeData) {
   56 |         await this.clickOnPIMModule();
   57 |         await this.goToAddEmployeePage();
   58 |         await this.fillAddEmployee(employee);
   59 |         await this.saveNewEmployeeClick();
   60 |         await this.page.waitForResponse(response => response.url().includes('/api/v2/pim/employees') && response.status() === 200);
   61 |         await this.page.waitForTimeout(2000);
   62 |     }
   63 |
   64 |     async searchClick() {
   65 |         await this.searchBtn.click();
   66 |     }
   67 |
   68 |     async fillEmployeeInfoIDInput(id: string) {
   69 |         await this.employeeInfoIDInput.fill(id);
   70 |     }
   71 |     async saveNewEmployeeClick() {
   72 |         await this.saveNewEmployeeBtn.click();
   73 |     }
   74 |     async saveEditEmployeeClick() {
   75 |         await this.saveEditBtn.click();
   76 |     }
   77 |     async clickOnPIMModule() {
>  78 |         await this.pimModuleBtn.click();
      |                                 ^ Error: locator.click: Test timeout of 40000ms exceeded.
   79 |     }
   80 |
   81 |     async succeedPopUpVisible() {
   82 |         await this.successPopUp.isVisible();
   83 |     };
   84 |
   85 |     async editEmployeeInfoIconClick() {
   86 |         await this.editEmployeeInfoIconBtn.click();
   87 |     }
   88 |
   89 |     async isUniqueID(id: string): Promise<boolean> {
   90 |         await this.page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/pim/viewEmployeeList');
   91 |         await this.page.waitForLoadState('domcontentloaded');
   92 |
   93 |         const employeeRow = this.page.locator(`div.oxd-table-row:has-text("${id}")`);
   94 |         const isRowVisible = await employeeRow.isVisible();
   95 |         return !isRowVisible;
   96 |     }
   97 |
   98 |     async generateUniqueID(): Promise<string> {
   99 |         let uniqueID: string = '';
  100 |         let isUnique: boolean = false;
  101 |         while (!isUnique) {
  102 |             uniqueID = Math.floor(Math.random() * (10000 - 1 + 1) + 1).toString();
  103 |             isUnique = await this.isUniqueID(uniqueID);
  104 |         }
  105 |         return uniqueID;
  106 |     }
  107 | }
```
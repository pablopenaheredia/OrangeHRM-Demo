# Instructions

- Following Playwright test failed.
- Explain why, be concise, respect Playwright best practices.
- Provide a snippet of code with the fix, if possible.

# Test info

- Name: [US03] GestiÃ³n de empleados | Editar empleados correctamente >> Validar editar un empleado exitosamente
- Location: C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\edit-employee.info.spec.ts:10:9

# Error details

```
Error: locator.click: Target page, context or browser has been closed
Call log:
  - waiting for getByRole('button', { name: 'Search' })

    at EmployeePage.searchClick (C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\pageobjectsmodels\EmployeePage.ts:46:30)
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\edit-employee.info.spec.ts:29:32
    at C:\Programacion\QA\Automation\Playwright-ts\Proyecto OrangeHRM\OrangeHRM-Demo\tests\e2e\employees\edit-employee.info.spec.ts:26:9
```

# Test source

```ts
   1 | import { type Page, type Locator, expect } from '@playwright/test';
   2 |
   3 | export class EmployeePage {
   4 |     readonly page: Page;
   5 |     readonly addEmployeeBtn: Locator;
   6 |     readonly firstNameInput: Locator;
   7 |     readonly lastNameInput: Locator;
   8 |     readonly employeeIDInput: Locator;
   9 |     readonly saveBtn: Locator;
  10 |     readonly searchBtn: Locator;
  11 |     readonly pimModuleBtn: Locator;
  12 |     readonly employeeInfoIDInput: Locator;
  13 |     readonly idColumnValues = (id: string) => this.page.locator(`div.oxd-table-cell:has-text("${id}")`).first()
  14 |     readonly lastNameValues = (lastname: string) => this.page.locator(`div.oxd-table-cell:has-text("${lastname}")`).first()
  15 |     readonly editEmployeeInfoIconBtn: Locator
  16 |     readonly successPopUp: Locator
  17 |     
  18 |     constructor(page: Page) {
  19 |         this.page = page;
  20 |         this.addEmployeeBtn = this.page.locator("//button[contains(.,'Add')]");
  21 |         this.firstNameInput = this.page.getByRole('textbox', { name: 'First Name' });
  22 |         this.lastNameInput = this.page.getByRole('textbox', { name: 'Last Name' });
  23 |         this.employeeIDInput = this.page.locator("(//input[@class='oxd-input oxd-input--active'])[2]");
  24 |         this.saveBtn = this.page.getByRole('button', { name: 'Save' });
  25 |         this.searchBtn = this.page.getByRole('button', { name: 'Search' });
  26 |         this.pimModuleBtn = this.page.getByRole('link', { name: 'PIM' });
  27 |         this.employeeInfoIDInput = this.page.getByRole('textbox').nth(2);
  28 |         this.editEmployeeInfoIconBtn = this.page.locator("//div[@class='oxd-table-cell-actions']//button[1]");
  29 |         this.successPopUp = this.page.getByRole('paragraph', {name: 'Successfully Updated'});
  30 |     }
  31 |
  32 |     async goToAddEmployeePage() {
  33 |         await this.page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/pim/viewEmployeeList');
  34 |         await this.addEmployeeBtn.click();
  35 |         await this.page.waitForLoadState('domcontentloaded');
  36 |         await expect(this.page).toHaveURL(/pim\/addEmployee/);
  37 |     }
  38 |
  39 |     async fillAddEmployee(firstName: string, lastName: string, employeeID: string) {
  40 |         await this.firstNameInput.fill(firstName);
  41 |         await this.lastNameInput.fill(lastName);
  42 |         await this.employeeIDInput.fill(employeeID);
  43 |     }
  44 |
  45 |     async searchClick() {
> 46 |         await this.searchBtn.click();
     |                              ^ Error: locator.click: Target page, context or browser has been closed
  47 |     }
  48 |
  49 |     async fillEmployeeInfoIDInput(id: string) {
  50 |         await this.employeeInfoIDInput.fill(id);
  51 |     }
  52 |     async saveClick() {
  53 |         await this.saveBtn.click();
  54 |     }
  55 |     async clickOnPIMModule() {
  56 |         await this.pimModuleBtn.click();
  57 |     }
  58 |
  59 |     async succeedPopUpVisible() {
  60 |         await this.successPopUp.isVisible();
  61 |     };
  62 |
  63 |     async editEmployeeInfoIconClick() {
  64 |         await this.editEmployeeInfoIconBtn.click();
  65 |     }
  66 |
  67 |     async isUniqueID(id: string): Promise<boolean> {
  68 |         await this.page.goto('https://opensource-demo.orangehrmlive.com/web/index.php/pim/viewEmployeeList');
  69 |         await this.page.waitForLoadState('domcontentloaded');
  70 |
  71 |         const employeeRow = this.page.locator(`div.oxd-table-row:has-text("${id}")`);
  72 |
  73 |         const isRowVisible = await employeeRow.isVisible();
  74 |         return !isRowVisible;
  75 |     }
  76 |
  77 |     async generateUniqueID(): Promise<string> {
  78 |         let uniqueID: string = '';
  79 |         let isUnique: boolean = false;
  80 |         while (!isUnique) {
  81 |             uniqueID = Math.floor(Math.random() * (10000 - 1 + 1) + 1).toString();
  82 |             isUnique = await this.isUniqueID(uniqueID);
  83 |         }
  84 |         return uniqueID;
  85 |     }
  86 | }
  87 |
```